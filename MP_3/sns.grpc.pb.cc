// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: sns.proto

#include "sns.pb.h"
#include "sns.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace csce438 {

static const char* SNSService_method_names[] = {
  "/csce438.SNSService/Login",
  "/csce438.SNSService/List",
  "/csce438.SNSService/Follow",
  "/csce438.SNSService/Timeline",
};

std::unique_ptr< SNSService::Stub> SNSService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< SNSService::Stub> stub(new SNSService::Stub(channel, options));
  return stub;
}

SNSService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Login_(SNSService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_List_(SNSService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Follow_(SNSService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Timeline_(SNSService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::Status SNSService::Stub::Login(::grpc::ClientContext* context, const ::csce438::Request& request, ::csce438::Reply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::csce438::Request, ::csce438::Reply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Login_, context, request, response);
}

void SNSService::Stub::async::Login(::grpc::ClientContext* context, const ::csce438::Request* request, ::csce438::Reply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::csce438::Request, ::csce438::Reply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Login_, context, request, response, std::move(f));
}

void SNSService::Stub::async::Login(::grpc::ClientContext* context, const ::csce438::Request* request, ::csce438::Reply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Login_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::csce438::Reply>* SNSService::Stub::PrepareAsyncLoginRaw(::grpc::ClientContext* context, const ::csce438::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::csce438::Reply, ::csce438::Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Login_, context, request);
}

::grpc::ClientAsyncResponseReader< ::csce438::Reply>* SNSService::Stub::AsyncLoginRaw(::grpc::ClientContext* context, const ::csce438::Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncLoginRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SNSService::Stub::List(::grpc::ClientContext* context, const ::csce438::Request& request, ::csce438::ListReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::csce438::Request, ::csce438::ListReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_List_, context, request, response);
}

void SNSService::Stub::async::List(::grpc::ClientContext* context, const ::csce438::Request* request, ::csce438::ListReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::csce438::Request, ::csce438::ListReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_List_, context, request, response, std::move(f));
}

void SNSService::Stub::async::List(::grpc::ClientContext* context, const ::csce438::Request* request, ::csce438::ListReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_List_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::csce438::ListReply>* SNSService::Stub::PrepareAsyncListRaw(::grpc::ClientContext* context, const ::csce438::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::csce438::ListReply, ::csce438::Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_List_, context, request);
}

::grpc::ClientAsyncResponseReader< ::csce438::ListReply>* SNSService::Stub::AsyncListRaw(::grpc::ClientContext* context, const ::csce438::Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SNSService::Stub::Follow(::grpc::ClientContext* context, const ::csce438::Request& request, ::csce438::Reply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::csce438::Request, ::csce438::Reply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Follow_, context, request, response);
}

void SNSService::Stub::async::Follow(::grpc::ClientContext* context, const ::csce438::Request* request, ::csce438::Reply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::csce438::Request, ::csce438::Reply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Follow_, context, request, response, std::move(f));
}

void SNSService::Stub::async::Follow(::grpc::ClientContext* context, const ::csce438::Request* request, ::csce438::Reply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Follow_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::csce438::Reply>* SNSService::Stub::PrepareAsyncFollowRaw(::grpc::ClientContext* context, const ::csce438::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::csce438::Reply, ::csce438::Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Follow_, context, request);
}

::grpc::ClientAsyncResponseReader< ::csce438::Reply>* SNSService::Stub::AsyncFollowRaw(::grpc::ClientContext* context, const ::csce438::Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncFollowRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReaderWriter< ::csce438::Message, ::csce438::Message>* SNSService::Stub::TimelineRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::csce438::Message, ::csce438::Message>::Create(channel_.get(), rpcmethod_Timeline_, context);
}

void SNSService::Stub::async::Timeline(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::csce438::Message,::csce438::Message>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::csce438::Message,::csce438::Message>::Create(stub_->channel_.get(), stub_->rpcmethod_Timeline_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::csce438::Message, ::csce438::Message>* SNSService::Stub::AsyncTimelineRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::csce438::Message, ::csce438::Message>::Create(channel_.get(), cq, rpcmethod_Timeline_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::csce438::Message, ::csce438::Message>* SNSService::Stub::PrepareAsyncTimelineRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::csce438::Message, ::csce438::Message>::Create(channel_.get(), cq, rpcmethod_Timeline_, context, false, nullptr);
}

SNSService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SNSService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SNSService::Service, ::csce438::Request, ::csce438::Reply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SNSService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::csce438::Request* req,
             ::csce438::Reply* resp) {
               return service->Login(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SNSService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SNSService::Service, ::csce438::Request, ::csce438::ListReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SNSService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::csce438::Request* req,
             ::csce438::ListReply* resp) {
               return service->List(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SNSService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SNSService::Service, ::csce438::Request, ::csce438::Reply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SNSService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::csce438::Request* req,
             ::csce438::Reply* resp) {
               return service->Follow(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SNSService_method_names[3],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< SNSService::Service, ::csce438::Message, ::csce438::Message>(
          [](SNSService::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::csce438::Message,
             ::csce438::Message>* stream) {
               return service->Timeline(ctx, stream);
             }, this)));
}

SNSService::Service::~Service() {
}

::grpc::Status SNSService::Service::Login(::grpc::ServerContext* context, const ::csce438::Request* request, ::csce438::Reply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SNSService::Service::List(::grpc::ServerContext* context, const ::csce438::Request* request, ::csce438::ListReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SNSService::Service::Follow(::grpc::ServerContext* context, const ::csce438::Request* request, ::csce438::Reply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SNSService::Service::Timeline(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::csce438::Message, ::csce438::Message>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* SNSSandMInform_method_names[] = {
  "/csce438.SNSSandMInform/PokeMaster",
  "/csce438.SNSSandMInform/LoginUpdate",
  "/csce438.SNSSandMInform/FollowUpdate",
  "/csce438.SNSSandMInform/TimelineUpdate",
};

std::unique_ptr< SNSSandMInform::Stub> SNSSandMInform::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< SNSSandMInform::Stub> stub(new SNSSandMInform::Stub(channel, options));
  return stub;
}

SNSSandMInform::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_PokeMaster_(SNSSandMInform_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_LoginUpdate_(SNSSandMInform_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_FollowUpdate_(SNSSandMInform_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_TimelineUpdate_(SNSSandMInform_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status SNSSandMInform::Stub::PokeMaster(::grpc::ClientContext* context, const ::csce438::ServerIdent& request, ::csce438::ServerIdent* response) {
  return ::grpc::internal::BlockingUnaryCall< ::csce438::ServerIdent, ::csce438::ServerIdent, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PokeMaster_, context, request, response);
}

void SNSSandMInform::Stub::async::PokeMaster(::grpc::ClientContext* context, const ::csce438::ServerIdent* request, ::csce438::ServerIdent* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::csce438::ServerIdent, ::csce438::ServerIdent, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PokeMaster_, context, request, response, std::move(f));
}

void SNSSandMInform::Stub::async::PokeMaster(::grpc::ClientContext* context, const ::csce438::ServerIdent* request, ::csce438::ServerIdent* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PokeMaster_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::csce438::ServerIdent>* SNSSandMInform::Stub::PrepareAsyncPokeMasterRaw(::grpc::ClientContext* context, const ::csce438::ServerIdent& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::csce438::ServerIdent, ::csce438::ServerIdent, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PokeMaster_, context, request);
}

::grpc::ClientAsyncResponseReader< ::csce438::ServerIdent>* SNSSandMInform::Stub::AsyncPokeMasterRaw(::grpc::ClientContext* context, const ::csce438::ServerIdent& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPokeMasterRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SNSSandMInform::Stub::LoginUpdate(::grpc::ClientContext* context, const ::csce438::Request& request, ::csce438::Reply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::csce438::Request, ::csce438::Reply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_LoginUpdate_, context, request, response);
}

void SNSSandMInform::Stub::async::LoginUpdate(::grpc::ClientContext* context, const ::csce438::Request* request, ::csce438::Reply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::csce438::Request, ::csce438::Reply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_LoginUpdate_, context, request, response, std::move(f));
}

void SNSSandMInform::Stub::async::LoginUpdate(::grpc::ClientContext* context, const ::csce438::Request* request, ::csce438::Reply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_LoginUpdate_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::csce438::Reply>* SNSSandMInform::Stub::PrepareAsyncLoginUpdateRaw(::grpc::ClientContext* context, const ::csce438::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::csce438::Reply, ::csce438::Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_LoginUpdate_, context, request);
}

::grpc::ClientAsyncResponseReader< ::csce438::Reply>* SNSSandMInform::Stub::AsyncLoginUpdateRaw(::grpc::ClientContext* context, const ::csce438::Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncLoginUpdateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SNSSandMInform::Stub::FollowUpdate(::grpc::ClientContext* context, const ::csce438::FollowData& request, ::csce438::Blep* response) {
  return ::grpc::internal::BlockingUnaryCall< ::csce438::FollowData, ::csce438::Blep, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_FollowUpdate_, context, request, response);
}

void SNSSandMInform::Stub::async::FollowUpdate(::grpc::ClientContext* context, const ::csce438::FollowData* request, ::csce438::Blep* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::csce438::FollowData, ::csce438::Blep, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FollowUpdate_, context, request, response, std::move(f));
}

void SNSSandMInform::Stub::async::FollowUpdate(::grpc::ClientContext* context, const ::csce438::FollowData* request, ::csce438::Blep* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FollowUpdate_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::csce438::Blep>* SNSSandMInform::Stub::PrepareAsyncFollowUpdateRaw(::grpc::ClientContext* context, const ::csce438::FollowData& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::csce438::Blep, ::csce438::FollowData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_FollowUpdate_, context, request);
}

::grpc::ClientAsyncResponseReader< ::csce438::Blep>* SNSSandMInform::Stub::AsyncFollowUpdateRaw(::grpc::ClientContext* context, const ::csce438::FollowData& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncFollowUpdateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SNSSandMInform::Stub::TimelineUpdate(::grpc::ClientContext* context, const ::csce438::MsgChunk& request, ::csce438::Blep* response) {
  return ::grpc::internal::BlockingUnaryCall< ::csce438::MsgChunk, ::csce438::Blep, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_TimelineUpdate_, context, request, response);
}

void SNSSandMInform::Stub::async::TimelineUpdate(::grpc::ClientContext* context, const ::csce438::MsgChunk* request, ::csce438::Blep* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::csce438::MsgChunk, ::csce438::Blep, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TimelineUpdate_, context, request, response, std::move(f));
}

void SNSSandMInform::Stub::async::TimelineUpdate(::grpc::ClientContext* context, const ::csce438::MsgChunk* request, ::csce438::Blep* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TimelineUpdate_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::csce438::Blep>* SNSSandMInform::Stub::PrepareAsyncTimelineUpdateRaw(::grpc::ClientContext* context, const ::csce438::MsgChunk& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::csce438::Blep, ::csce438::MsgChunk, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_TimelineUpdate_, context, request);
}

::grpc::ClientAsyncResponseReader< ::csce438::Blep>* SNSSandMInform::Stub::AsyncTimelineUpdateRaw(::grpc::ClientContext* context, const ::csce438::MsgChunk& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncTimelineUpdateRaw(context, request, cq);
  result->StartCall();
  return result;
}

SNSSandMInform::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SNSSandMInform_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SNSSandMInform::Service, ::csce438::ServerIdent, ::csce438::ServerIdent, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SNSSandMInform::Service* service,
             ::grpc::ServerContext* ctx,
             const ::csce438::ServerIdent* req,
             ::csce438::ServerIdent* resp) {
               return service->PokeMaster(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SNSSandMInform_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SNSSandMInform::Service, ::csce438::Request, ::csce438::Reply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SNSSandMInform::Service* service,
             ::grpc::ServerContext* ctx,
             const ::csce438::Request* req,
             ::csce438::Reply* resp) {
               return service->LoginUpdate(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SNSSandMInform_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SNSSandMInform::Service, ::csce438::FollowData, ::csce438::Blep, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SNSSandMInform::Service* service,
             ::grpc::ServerContext* ctx,
             const ::csce438::FollowData* req,
             ::csce438::Blep* resp) {
               return service->FollowUpdate(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SNSSandMInform_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SNSSandMInform::Service, ::csce438::MsgChunk, ::csce438::Blep, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SNSSandMInform::Service* service,
             ::grpc::ServerContext* ctx,
             const ::csce438::MsgChunk* req,
             ::csce438::Blep* resp) {
               return service->TimelineUpdate(ctx, req, resp);
             }, this)));
}

SNSSandMInform::Service::~Service() {
}

::grpc::Status SNSSandMInform::Service::PokeMaster(::grpc::ServerContext* context, const ::csce438::ServerIdent* request, ::csce438::ServerIdent* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SNSSandMInform::Service::LoginUpdate(::grpc::ServerContext* context, const ::csce438::Request* request, ::csce438::Reply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SNSSandMInform::Service::FollowUpdate(::grpc::ServerContext* context, const ::csce438::FollowData* request, ::csce438::Blep* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SNSSandMInform::Service::TimelineUpdate(::grpc::ServerContext* context, const ::csce438::MsgChunk* request, ::csce438::Blep* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* SNSCoord_method_names[] = {
  "/csce438.SNSCoord/ClusterSpawn",
  "/csce438.SNSCoord/FollowerSpawn",
  "/csce438.SNSCoord/GetConnection",
  "/csce438.SNSCoord/GetFollowing",
  "/csce438.SNSCoord/Gucci",
};

std::unique_ptr< SNSCoord::Stub> SNSCoord::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< SNSCoord::Stub> stub(new SNSCoord::Stub(channel, options));
  return stub;
}

SNSCoord::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_ClusterSpawn_(SNSCoord_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_FollowerSpawn_(SNSCoord_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetConnection_(SNSCoord_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetFollowing_(SNSCoord_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Gucci_(SNSCoord_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status SNSCoord::Stub::ClusterSpawn(::grpc::ClientContext* context, const ::csce438::ClusterInfo& request, ::csce438::ServerIdent* response) {
  return ::grpc::internal::BlockingUnaryCall< ::csce438::ClusterInfo, ::csce438::ServerIdent, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ClusterSpawn_, context, request, response);
}

void SNSCoord::Stub::async::ClusterSpawn(::grpc::ClientContext* context, const ::csce438::ClusterInfo* request, ::csce438::ServerIdent* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::csce438::ClusterInfo, ::csce438::ServerIdent, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ClusterSpawn_, context, request, response, std::move(f));
}

void SNSCoord::Stub::async::ClusterSpawn(::grpc::ClientContext* context, const ::csce438::ClusterInfo* request, ::csce438::ServerIdent* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ClusterSpawn_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::csce438::ServerIdent>* SNSCoord::Stub::PrepareAsyncClusterSpawnRaw(::grpc::ClientContext* context, const ::csce438::ClusterInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::csce438::ServerIdent, ::csce438::ClusterInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ClusterSpawn_, context, request);
}

::grpc::ClientAsyncResponseReader< ::csce438::ServerIdent>* SNSCoord::Stub::AsyncClusterSpawnRaw(::grpc::ClientContext* context, const ::csce438::ClusterInfo& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncClusterSpawnRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SNSCoord::Stub::FollowerSpawn(::grpc::ClientContext* context, const ::csce438::FollowerInfo& request, ::csce438::Blep* response) {
  return ::grpc::internal::BlockingUnaryCall< ::csce438::FollowerInfo, ::csce438::Blep, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_FollowerSpawn_, context, request, response);
}

void SNSCoord::Stub::async::FollowerSpawn(::grpc::ClientContext* context, const ::csce438::FollowerInfo* request, ::csce438::Blep* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::csce438::FollowerInfo, ::csce438::Blep, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FollowerSpawn_, context, request, response, std::move(f));
}

void SNSCoord::Stub::async::FollowerSpawn(::grpc::ClientContext* context, const ::csce438::FollowerInfo* request, ::csce438::Blep* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FollowerSpawn_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::csce438::Blep>* SNSCoord::Stub::PrepareAsyncFollowerSpawnRaw(::grpc::ClientContext* context, const ::csce438::FollowerInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::csce438::Blep, ::csce438::FollowerInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_FollowerSpawn_, context, request);
}

::grpc::ClientAsyncResponseReader< ::csce438::Blep>* SNSCoord::Stub::AsyncFollowerSpawnRaw(::grpc::ClientContext* context, const ::csce438::FollowerInfo& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncFollowerSpawnRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SNSCoord::Stub::GetConnection(::grpc::ClientContext* context, const ::csce438::JoinReq& request, ::csce438::ClusterInfo* response) {
  return ::grpc::internal::BlockingUnaryCall< ::csce438::JoinReq, ::csce438::ClusterInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetConnection_, context, request, response);
}

void SNSCoord::Stub::async::GetConnection(::grpc::ClientContext* context, const ::csce438::JoinReq* request, ::csce438::ClusterInfo* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::csce438::JoinReq, ::csce438::ClusterInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetConnection_, context, request, response, std::move(f));
}

void SNSCoord::Stub::async::GetConnection(::grpc::ClientContext* context, const ::csce438::JoinReq* request, ::csce438::ClusterInfo* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetConnection_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::csce438::ClusterInfo>* SNSCoord::Stub::PrepareAsyncGetConnectionRaw(::grpc::ClientContext* context, const ::csce438::JoinReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::csce438::ClusterInfo, ::csce438::JoinReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetConnection_, context, request);
}

::grpc::ClientAsyncResponseReader< ::csce438::ClusterInfo>* SNSCoord::Stub::AsyncGetConnectionRaw(::grpc::ClientContext* context, const ::csce438::JoinReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetConnectionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SNSCoord::Stub::GetFollowing(::grpc::ClientContext* context, const ::csce438::JoinReq& request, ::csce438::FollowerInfo* response) {
  return ::grpc::internal::BlockingUnaryCall< ::csce438::JoinReq, ::csce438::FollowerInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetFollowing_, context, request, response);
}

void SNSCoord::Stub::async::GetFollowing(::grpc::ClientContext* context, const ::csce438::JoinReq* request, ::csce438::FollowerInfo* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::csce438::JoinReq, ::csce438::FollowerInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetFollowing_, context, request, response, std::move(f));
}

void SNSCoord::Stub::async::GetFollowing(::grpc::ClientContext* context, const ::csce438::JoinReq* request, ::csce438::FollowerInfo* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetFollowing_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::csce438::FollowerInfo>* SNSCoord::Stub::PrepareAsyncGetFollowingRaw(::grpc::ClientContext* context, const ::csce438::JoinReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::csce438::FollowerInfo, ::csce438::JoinReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetFollowing_, context, request);
}

::grpc::ClientAsyncResponseReader< ::csce438::FollowerInfo>* SNSCoord::Stub::AsyncGetFollowingRaw(::grpc::ClientContext* context, const ::csce438::JoinReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetFollowingRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SNSCoord::Stub::Gucci(::grpc::ClientContext* context, const ::csce438::HrtBt& request, ::csce438::HrtBt* response) {
  return ::grpc::internal::BlockingUnaryCall< ::csce438::HrtBt, ::csce438::HrtBt, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Gucci_, context, request, response);
}

void SNSCoord::Stub::async::Gucci(::grpc::ClientContext* context, const ::csce438::HrtBt* request, ::csce438::HrtBt* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::csce438::HrtBt, ::csce438::HrtBt, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Gucci_, context, request, response, std::move(f));
}

void SNSCoord::Stub::async::Gucci(::grpc::ClientContext* context, const ::csce438::HrtBt* request, ::csce438::HrtBt* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Gucci_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::csce438::HrtBt>* SNSCoord::Stub::PrepareAsyncGucciRaw(::grpc::ClientContext* context, const ::csce438::HrtBt& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::csce438::HrtBt, ::csce438::HrtBt, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Gucci_, context, request);
}

::grpc::ClientAsyncResponseReader< ::csce438::HrtBt>* SNSCoord::Stub::AsyncGucciRaw(::grpc::ClientContext* context, const ::csce438::HrtBt& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGucciRaw(context, request, cq);
  result->StartCall();
  return result;
}

SNSCoord::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SNSCoord_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SNSCoord::Service, ::csce438::ClusterInfo, ::csce438::ServerIdent, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SNSCoord::Service* service,
             ::grpc::ServerContext* ctx,
             const ::csce438::ClusterInfo* req,
             ::csce438::ServerIdent* resp) {
               return service->ClusterSpawn(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SNSCoord_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SNSCoord::Service, ::csce438::FollowerInfo, ::csce438::Blep, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SNSCoord::Service* service,
             ::grpc::ServerContext* ctx,
             const ::csce438::FollowerInfo* req,
             ::csce438::Blep* resp) {
               return service->FollowerSpawn(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SNSCoord_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SNSCoord::Service, ::csce438::JoinReq, ::csce438::ClusterInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SNSCoord::Service* service,
             ::grpc::ServerContext* ctx,
             const ::csce438::JoinReq* req,
             ::csce438::ClusterInfo* resp) {
               return service->GetConnection(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SNSCoord_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SNSCoord::Service, ::csce438::JoinReq, ::csce438::FollowerInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SNSCoord::Service* service,
             ::grpc::ServerContext* ctx,
             const ::csce438::JoinReq* req,
             ::csce438::FollowerInfo* resp) {
               return service->GetFollowing(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SNSCoord_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SNSCoord::Service, ::csce438::HrtBt, ::csce438::HrtBt, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SNSCoord::Service* service,
             ::grpc::ServerContext* ctx,
             const ::csce438::HrtBt* req,
             ::csce438::HrtBt* resp) {
               return service->Gucci(ctx, req, resp);
             }, this)));
}

SNSCoord::Service::~Service() {
}

::grpc::Status SNSCoord::Service::ClusterSpawn(::grpc::ServerContext* context, const ::csce438::ClusterInfo* request, ::csce438::ServerIdent* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SNSCoord::Service::FollowerSpawn(::grpc::ServerContext* context, const ::csce438::FollowerInfo* request, ::csce438::Blep* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SNSCoord::Service::GetConnection(::grpc::ServerContext* context, const ::csce438::JoinReq* request, ::csce438::ClusterInfo* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SNSCoord::Service::GetFollowing(::grpc::ServerContext* context, const ::csce438::JoinReq* request, ::csce438::FollowerInfo* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SNSCoord::Service::Gucci(::grpc::ServerContext* context, const ::csce438::HrtBt* request, ::csce438::HrtBt* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* SNSFollower_method_names[] = {
  "/csce438.SNSFollower/Following",
  "/csce438.SNSFollower/newMessage",
  "/csce438.SNSFollower/newClient",
};

std::unique_ptr< SNSFollower::Stub> SNSFollower::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< SNSFollower::Stub> stub(new SNSFollower::Stub(channel, options));
  return stub;
}

SNSFollower::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Following_(SNSFollower_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_newMessage_(SNSFollower_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_newClient_(SNSFollower_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status SNSFollower::Stub::Following(::grpc::ClientContext* context, const ::csce438::FollowPair& request, ::csce438::Blep* response) {
  return ::grpc::internal::BlockingUnaryCall< ::csce438::FollowPair, ::csce438::Blep, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Following_, context, request, response);
}

void SNSFollower::Stub::async::Following(::grpc::ClientContext* context, const ::csce438::FollowPair* request, ::csce438::Blep* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::csce438::FollowPair, ::csce438::Blep, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Following_, context, request, response, std::move(f));
}

void SNSFollower::Stub::async::Following(::grpc::ClientContext* context, const ::csce438::FollowPair* request, ::csce438::Blep* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Following_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::csce438::Blep>* SNSFollower::Stub::PrepareAsyncFollowingRaw(::grpc::ClientContext* context, const ::csce438::FollowPair& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::csce438::Blep, ::csce438::FollowPair, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Following_, context, request);
}

::grpc::ClientAsyncResponseReader< ::csce438::Blep>* SNSFollower::Stub::AsyncFollowingRaw(::grpc::ClientContext* context, const ::csce438::FollowPair& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncFollowingRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SNSFollower::Stub::newMessage(::grpc::ClientContext* context, const ::csce438::MsgChunk& request, ::csce438::Blep* response) {
  return ::grpc::internal::BlockingUnaryCall< ::csce438::MsgChunk, ::csce438::Blep, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_newMessage_, context, request, response);
}

void SNSFollower::Stub::async::newMessage(::grpc::ClientContext* context, const ::csce438::MsgChunk* request, ::csce438::Blep* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::csce438::MsgChunk, ::csce438::Blep, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_newMessage_, context, request, response, std::move(f));
}

void SNSFollower::Stub::async::newMessage(::grpc::ClientContext* context, const ::csce438::MsgChunk* request, ::csce438::Blep* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_newMessage_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::csce438::Blep>* SNSFollower::Stub::PrepareAsyncnewMessageRaw(::grpc::ClientContext* context, const ::csce438::MsgChunk& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::csce438::Blep, ::csce438::MsgChunk, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_newMessage_, context, request);
}

::grpc::ClientAsyncResponseReader< ::csce438::Blep>* SNSFollower::Stub::AsyncnewMessageRaw(::grpc::ClientContext* context, const ::csce438::MsgChunk& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncnewMessageRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SNSFollower::Stub::newClient(::grpc::ClientContext* context, const ::csce438::JoinReq& request, ::csce438::Blep* response) {
  return ::grpc::internal::BlockingUnaryCall< ::csce438::JoinReq, ::csce438::Blep, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_newClient_, context, request, response);
}

void SNSFollower::Stub::async::newClient(::grpc::ClientContext* context, const ::csce438::JoinReq* request, ::csce438::Blep* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::csce438::JoinReq, ::csce438::Blep, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_newClient_, context, request, response, std::move(f));
}

void SNSFollower::Stub::async::newClient(::grpc::ClientContext* context, const ::csce438::JoinReq* request, ::csce438::Blep* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_newClient_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::csce438::Blep>* SNSFollower::Stub::PrepareAsyncnewClientRaw(::grpc::ClientContext* context, const ::csce438::JoinReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::csce438::Blep, ::csce438::JoinReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_newClient_, context, request);
}

::grpc::ClientAsyncResponseReader< ::csce438::Blep>* SNSFollower::Stub::AsyncnewClientRaw(::grpc::ClientContext* context, const ::csce438::JoinReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncnewClientRaw(context, request, cq);
  result->StartCall();
  return result;
}

SNSFollower::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SNSFollower_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SNSFollower::Service, ::csce438::FollowPair, ::csce438::Blep, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SNSFollower::Service* service,
             ::grpc::ServerContext* ctx,
             const ::csce438::FollowPair* req,
             ::csce438::Blep* resp) {
               return service->Following(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SNSFollower_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SNSFollower::Service, ::csce438::MsgChunk, ::csce438::Blep, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SNSFollower::Service* service,
             ::grpc::ServerContext* ctx,
             const ::csce438::MsgChunk* req,
             ::csce438::Blep* resp) {
               return service->newMessage(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SNSFollower_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SNSFollower::Service, ::csce438::JoinReq, ::csce438::Blep, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SNSFollower::Service* service,
             ::grpc::ServerContext* ctx,
             const ::csce438::JoinReq* req,
             ::csce438::Blep* resp) {
               return service->newClient(ctx, req, resp);
             }, this)));
}

SNSFollower::Service::~Service() {
}

::grpc::Status SNSFollower::Service::Following(::grpc::ServerContext* context, const ::csce438::FollowPair* request, ::csce438::Blep* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SNSFollower::Service::newMessage(::grpc::ServerContext* context, const ::csce438::MsgChunk* request, ::csce438::Blep* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SNSFollower::Service::newClient(::grpc::ServerContext* context, const ::csce438::JoinReq* request, ::csce438::Blep* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace csce438

