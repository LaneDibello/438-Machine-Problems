--CLIENT--
-connectTo-
// ------------------------------------------------------------
// In this function, you are supposed to create a stub so that
// you call service methods in the processCommand/porcessTimeline
// functions. That is, the stub should be accessible when you want
// to call any service methods in those functions.
// I recommend you to have the stub as
// a member variable in your own Client class.
// Please refer to gRpc tutorial how to create a stub.
// ------------------------------------------------------------
-processCommand-
// ------------------------------------------------------------
// GUIDE 1:
// In this function, you are supposed to parse the given input
// command and create your own message so that you call an 
// appropriate service method. The input command will be one
// of the followings:
//
// FOLLOW <username>
// UNFOLLOW <username>
// LIST
// TIMELINE
//
// ------------------------------------------------------------
// ------------------------------------------------------------
// GUIDE 2:
// Then, you should create a variable of IReply structure
// provided by the client.h and initialize it according to
// the result. Finally you can finish this function by returning
// the IReply.
// ------------------------------------------------------------
// ------------------------------------------------------------
// HINT: How to set the IReply?
// Suppose you have "Follow" service method for FOLLOW command,
// IReply can be set as follow:
// 
//     // some codes for creating/initializing parameters for
//     // service method
//     IReply ire;
//     grpc::Status status = stub_->Follow(&context, /* some parameters */);
//     ire.grpc_status = status;
//     if (status.ok()) {
//         ire.comm_status = SUCCESS;
//     } else {
//         ire.comm_status = FAILURE_NOT_EXISTS;
//     }
//      
//      return ire;
// 
// IMPORTANT: 
// For the command "LIST", you should set both "all_users" and 
// "following_users" member variable of IReply.
// ------------------------------------------------------------
-processTimeline-
// ------------------------------------------------------------
// In this function, you are supposed to get into timeline mode.
// You may need to call a service method to communicate with
// the server. Use getPostMessage/displayPostMessage functions
// for both getting and displaying messages in timeline mode.
// You should use them as you did in hw1.
// ------------------------------------------------------------
// ------------------------------------------------------------
// IMPORTANT NOTICE:
//
// Once a user enter to timeline mode , there is no way
// to command mode. You don't have to worry about this situation,
// and you can terminate the client program by pressing
// CTRL-C (SIGINT)
// ------------------------------------------------------------


















